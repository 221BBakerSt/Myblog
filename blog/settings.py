"""
Generated by "django-admin startproject" using Django 2.1.5.
"""

import os
from decouple import config, Csv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don"t run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)
ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv())
# DEBUG = True
# ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    
    # for blog apps
    "post",
    "album",
    "about",
    "userprofile",
    "comment",

    # for widgets
    "ckeditor", # rich-text editor
    "markdownx", # markdown editor
    "embed_video", # to load video

    # for user login
    "django.contrib.sites",
    "allauth",
    "imagekit",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "allauth.socialaccount.providers.github",
]
SITE_ID = 1

MIDDLEWARE = [
    # to receive email notification when there is error
    "django.middleware.common.BrokenLinkEmailsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    ]

ROOT_URLCONF = "blog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "blog.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config("DB_NAME"),
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST"),
        "PORT": config("DB_PORT", default=5432, cast=int),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static/")]
STATIC_ROOT = os.path.join(BASE_DIR, "static/collectstatic/")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "static/media/")

# ckeditor config
CKEDITOR_CONFIGS = {
    # django-ckeditor默认使用default配置
    "default": {
        # editor size
        "width":"750px",
        "height":"250px",
        # tab to spaces
        "tabSpaces": 4,
        # toolbar style
        "toolbar": "Custom",
        # toolbar buttons
        "toolbar_Custom": [
            # emoticons and code blocks
            ["Smiley", "CodeSnippet"], 
            # font options
            ["Bold", "Italic", "Underline", "RemoveFormat", "Blockquote"],
            # font color
            ["TextColor", "BGColor"],
            # link
            ["Link", "Unlink"],
            # list
            ["NumberedList", "BulletedList"],
            ["Maximize"]
        ],
        # code block plugins
        "extraPlugins": ",".join(["codesnippet"]),
    }
}

# for login/register

AUTH_USER_MODEL = "userprofile.User"

# log in with either username or email
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
# email is required for registration
ACCOUNT_EMAIL_REQUIRED = True
# email must be unique
ACCOUNT_UNIQUE_EMAIL = True
# enter password twice when registration
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
# email verification
ACCOUNT_EMAIL_VERIFICATION = "optional"
# the expiration date of email confirmation mail
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3
# Subject-line prefix to use for email messages sent
# ACCOUNT_EMAIL_SUBJECT_PREFIX = "221bBakerSt.com"
# the duration seconds of sending the next confirmation email
ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60
# login attempt maximum
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
# log in automatically once email confirmed
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
# allow login via sociall account
SOCIALACCOUNT_AUTO_SIGNUP = True
# redirect to page once login
LOGIN_REDIRECT_URL = "/"
# redirect to page once logout
ACCOUNT_LOGOUT_REDIRECT_URL = "/"
# log out once email changed
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
# logout directly without confirmation
ACCOUNT_LOGOUT_ON_GET = True

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)

# email setting
ADMINS = [("admin", "maplewong04@gmail.com"),]
SEND_BROKEN_LINK_EMAILS = True
MANAGERS = ADMINS
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT", cast=int)
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
# attention email host password is not eamil login password
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
# TLS or SSL protocol
EMAIL_USE_TLS = config("EMAIL_USE_TLS", cast=bool)
EMAIL_USE_SSL = config("EMAIL_USE_SSL", cast=bool)
EMAIL_SUBJECT_PREFIX = config("EMAIL_SUBJECT_PREFIX")
DEFAULT_FROM_EMAIL = EMAIL_FROM = EMAIL_HOST_USER

# recaptcha authentication
GOOGLE_RECAPTCHA_SECRET_KEY = config("GOOGLE_RECAPTCHA_SECRET_KEY")


# LOG
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple"
        },
        "mail_admins": {
            "level": "ERROR",
            "class": "django.utils.log.AdminEmailHandler",
            "formatter": "verbose",
        },
        "file": {
            "level": "WARNING",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "log/warning.log"),
            "maxBytes": 1024 * 1024 * 50, # maximum size: 50MB
            "backupCount": 5,
            "encoding": "utf-8",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "propagate": True,
        },
        "django.request": {
            "handlers": ["file", "mail_admins"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.db.backends": {
            "handlers": ["file", "mail_admins"],
            "level": "WARNING",
            "propagate": True,
        },
    }
}
